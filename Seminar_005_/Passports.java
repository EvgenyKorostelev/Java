//üìî **–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:**
//   –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ù–æ–º–µ—Ä–æ–≤ –ø–∞—Å–ø–æ—Ä—Ç–æ–≤ –∏
//   –§–∞–º–∏–ª–∏–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.
//
//123456 –ò–≤–∞–Ω–æ–≤
//321456 –í–∞—Å–∏–ª—å–µ–≤
//234561 –ü–µ—Ç—Ä–æ–≤–∞
//234432 –ò–≤–∞–Ω–æ–≤
//654321 –ü–µ—Ç—Ä–æ–≤–∞
//345678 –ò–≤–∞–Ω–æ–≤
//    –í—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º —Å —Ñ–∞–º–∏–ª–∏–µ–π –ò–≤–∞–Ω–æ–≤.
public class Passports {
    private Map<String, String> map = new HashMap<>();

    public void add(String passNum, String lastName){
        map.put(passNum, lastName);
    }

    public String getByPassNum(String passNum){
        return passNum + " : " + map.get(passNum);
    }

    public String getByLastName(String lastName){
        StringBuilder stringBuilder = new StringBuilder();
        for (var entry : map.entrySet()){
            if(entry.getValue().equals(lastName)){
                stringBuilder.append(entry.getKey())
                        .append(" : ")
                        .append(lastName)
                        .append("\n");
            }
        }
        return stringBuilder.toString();
    }

    public String getAll(){
        return map.toString();
    }

}
//üìî **–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:**
//–î–∞–Ω—ã 2 —Å—Ç—Ä–æ–∫–∏, –Ω–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω–µ—Ç true, –µ—Å–ª–∏ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ —è–≤–ª—è—é—Ç—Å—è –∏–∑–æ–º–æ—Ä—Ñ–Ω—ã–º–∏ –∏ false, –µ—Å–ª–∏ –Ω–µ—Ç. –°—Ç—Ä–æ–∫–∏ –∏–∑–æ–º–æ—Ä—Ñ–Ω—ã, –µ—Å–ª–∏ –æ–¥–Ω—É –±—É–∫–≤—É –≤ –ø–µ—Ä–≤–æ–º —Å–ª–æ–≤–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—É—é –±—É–∫–≤—É –≤–æ –≤—Ç–æ—Ä–æ–º —Å–ª–æ–≤–µ, –ø—Ä–∏ —ç—Ç–æ–º
//1. –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –±—É–∫–≤—ã –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –º–µ–Ω—è—é—Ç—Å—è –Ω–∞ –æ–¥–Ω—É –∏ —Ç—É –∂–µ –±—É–∫–≤—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Ä—è–¥–∫–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. (–ù–∞–ø—Ä–∏–º–µ—Ä, add - egg –∏–∑–æ–º–æ—Ä—Ñ–Ω—ã)
//2. –±—É–∫–≤–∞ –º–æ–∂–µ—Ç –Ω–µ –º–µ–Ω—è—Ç—å—Å—è, –∞ –æ—Å—Ç–∞—Ç—å—Å—è —Ç–∞–∫–æ–π –∂–µ. (–ù–∞–ø—Ä–∏–º–µ—Ä, note - code)
//–ü—Ä–∏–º–µ—Ä 1:
//Input: s = "foo", t = "bar"
//Output: false
//–ü—Ä–∏–º–µ—Ä 2:
//Input: s = "paper", t = "title"
//Output: true
static boolean task0(String str1, String str2){
    Map<Character , Character> map = new HashMap<>();
    if(str1.length() != str2.length()) return false;
    char[] c1 = str1.toCharArray();
    char[] c2 = str2.toCharArray();
    for (int i = 0; i < c1.length; i++) {
        if(map.containsKey(c1[i])){
            if(map.get(c1[i]) != c2[i]) return false;
        } else {
            map.put(c1[i], c2[i]);
        }
    }
    return true;
}
//üìî **–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:**
// –ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –æ–ø—Ä–µ–¥–µ–ª—è—é—â—É—é –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–æ–±–æ–∫ –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏.
// –ü—Ä–∏–º–µ—Ä 1: a+(d*3) - –∏—Å—Ç–∏–Ω–∞
//–ü—Ä–∏–º–µ—Ä 2: [a+(1*3) - –ª–æ–∂—å
//–ü—Ä–∏–º–µ—Ä 3: [6+(3*3)] - –∏—Å—Ç–∏–Ω–∞
//–ü—Ä–∏–º–µ—Ä 4: {a}[+]{(d*3)} - –∏—Å—Ç–∏–Ω–∞
//–ü—Ä–∏–º–µ—Ä 5: <{a}+{(d*3)}> - –∏—Å—Ç–∏–Ω–∞
//–ü—Ä–∏–º–µ—Ä 6: {a+]}{(d*3)} - –ª–æ–∂—å
static boolean task1(String str){
    Stack<Character> stack = new Stack<>();//((1-2(4+4)(2*3))
    char[] c = str.toCharArray();
    for (int i = 0; i < c.length; i++) {// <{[
        if(c[i] == '(') stack.push(c[i]);
        if(c[i] == ')'){
            if(stack.isEmpty() || stack.pop() != '(') return false;
        }
    }
    return stack.isEmpty();
}

static boolean task2(String str) {
    Map<Character,Character> characterMap = new HashMap<>();
    characterMap.put('{', '}');
    characterMap.put('(', ')');
    characterMap.put('<', '>');
    characterMap.put('[', ']');

    Stack<Character> stack = new Stack<>();

    char[] chars = str.toCharArray();
    for (int i = 0; i < chars.length; i++) {
        if(characterMap.containsKey(chars[i])) {
            stack.push(chars[i]);
        }
        if (characterMap.containsValue(chars[i])){
            if(stack.isEmpty() || characterMap.get(stack.pop()) != chars[i]) return false;
        }
    }
    return stack.isEmpty();
}

//üìî **–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:**
//–í–∑—è—Ç—å –Ω–∞–±–æ—Ä —Å—Ç—Ä–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä,–ú–æ—Ä–æ–∑ –∏ —Å–æ–ª–Ω—Ü–µ –¥–µ–Ω—å —á—É–¥–µ—Å–Ω—ã–π
// –ï—â–µ —Ç—ã –¥—Ä–µ–º–ª–µ—à—å –¥—Ä—É–≥ –ø—Ä–µ–ª–µ—Å—Ç–Ω—ã–π –ü–æ—Ä–∞ –∫—Ä–∞—Å–∞–≤–∏—Ü–∞ –ø—Ä–æ—Å–Ω–∏—Å—å.
//–ù–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ—Ç —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –ø–æ –¥–ª–∏–Ω–µ —Å
// –ø–æ–º–æ—â—å—é TreeMap. –°—Ç—Ä–æ–∫–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω–æ–π –Ω–µ –¥–æ–ª–∂–Ω—ã ‚Äú–ø–æ—Ç–µ—Ä—è—Ç—å—Å—è‚Äù.
static void task3(String str){
    String[] words = str.split(" ");
    Map<Integer, List<String>> map = new TreeMap<>();
    for (String word : words){
        int len = word.length();
        if(map.containsKey(len)){
            List<String> list = map.get(len);
            list.add(word);
        } else {
            List<String> list = new ArrayList<>();
            list.add(word);
            map.put(len, list);
        }
    }
    System.out.println(map);
}
